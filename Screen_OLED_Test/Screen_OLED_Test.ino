#include <Arduino.h>
#include <U8g2lib.h>


//4.5 hours; reading library documentation and understanding
// U8X8_SSD1306_128X64_NONAME_HW_I2C u8x8 (U8X8_PIN_NONE); //pin used A4 (SDA) and A5 (SCL)
U8G2_SSD1306_128X64_NONAME_1_HW_I2C u8g2(U8G2_R0);// [page buffer, size = 128 B]

// All the images/bitmap
#define  AT_width 18
#define  AT_height 11
const unsigned char  AT_bits[] PROGMEM  = {
  0x1C, 0xFF, 0x01, 0x3E, 0xFF, 0x01, 0x63, 0x38, 0x00, 0x63, 0x38, 0x00, 
  0x63, 0x38, 0x00, 0x7F, 0x38, 0x00, 0x7F, 0x38, 0x00, 0x7F, 0x38, 0x00, 
  0x63, 0x38, 0x00, 0x63, 0x38, 0x00, 0x63, 0x38, 0x00, };
#define  AT_icon_width 16
#define  AT_icon_height 12
const unsigned char AT_icon_bits[] PROGMEM = {
  0x3F, 0x00, 0x48, 0x00, 0x88, 0x00, 0x48, 0x01, 0x3F, 0x01, 0x00, 0x82, 
  0x00, 0x82, 0x60, 0xA2, 0x90, 0xAA, 0x97, 0xAA, 0x60, 0xA0, 0x00, 0x80, 
  };
#define  battery_width 36
#define  battery_height 18
const unsigned char  battery_bits[] PROGMEM  = {
  0xFC, 0xFF, 0xFF, 0x7F, 0x00, 0xFC, 0xFF, 0xFF, 0x7F, 0x00, 0x03, 0x00, 
  0x00, 0x80, 0x03, 0x03, 0x00, 0x00, 0x80, 0x03, 0x03, 0x00, 0x00, 0x80, 
  0x03, 0x03, 0x00, 0x00, 0x80, 0x03, 0x03, 0x00, 0x00, 0x80, 0x0F, 0x03, 
  0x00, 0x00, 0x80, 0x0F, 0x03, 0x00, 0x00, 0x80, 0x0F, 0x03, 0x00, 0x00, 
  0x80, 0x0F, 0x03, 0x00, 0x00, 0x80, 0x0F, 0x03, 0x00, 0x00, 0x80, 0x0F, 
  0x03, 0x00, 0x00, 0x80, 0x03, 0x03, 0x00, 0x00, 0x80, 0x03, 0x03, 0x00, 
  0x00, 0x80, 0x03, 0x03, 0x00, 0x00, 0x80, 0x03, 0xFC, 0xFF, 0xFF, 0x7F, 
  0x00, 0xFC, 0xFF, 0xFF, 0x7F, 0x00, };
#define  highlight_width 21
#define  highlight_height 29
const unsigned char  highlight_bits[] PROGMEM  = {
  0xFC, 0xFF, 0x07, 0x02, 0x00, 0x08, 0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 
  0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 
  0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 
  0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 
  0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 
  0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 
  0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 0x02, 0x00, 0x08, 
  0xFC, 0xFF, 0x07, };
#define  KMH_width 15
#define  KMH_height 6
const unsigned char  KMH_bits[] PROGMEM  = {
  0x29, 0x4A, 0x65, 0x4B, 0xA3, 0x7A, 0x25, 0x4A, 0x29, 0x4A, 0x29, 0x4A, 
  };
#define  RC_width 16
#define  RC_height 11
const unsigned char RC_bits[] PROGMEM = {
  0x1F, 0x38, 0x3F, 0x7C, 0x63, 0xC6, 0x63, 0xC6, 0x3F, 0x06, 0x7F, 0x06, 
  0x63, 0x06, 0x63, 0x86, 0x63, 0xC6, 0x63, 0x7C, 0x63, 0x78, 
  };
#define  RC_Icon_width 16
#define  RC_Icon_height 21
const unsigned char  RC_Icon_bits[] PROGMEM  = {
  0x38, 0x1C, 0xC4, 0x23, 0x02, 0x40, 0x49, 0x92, 0x15, 0xA8, 0x09, 0x90, 
  0xE1, 0x87, 0x11, 0x88, 0x09, 0x90, 0x09, 0x90, 0x06, 0x60, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, };
#define  SM _width 18
#define  SM _height 11
const unsigned char  SM_bits[] PROGMEM  = {
  0x7F, 0x83, 0x01, 0x7F, 0x83, 0x01, 0x03, 0xEF, 0x01, 0x03, 0xFF, 0x01, 
  0x7F, 0xBB, 0x01, 0x7F, 0x93, 0x01, 0x60, 0x83, 0x01, 0x60, 0x83, 0x01, 
  0x60, 0x83, 0x01, 0x7F, 0x83, 0x01, 0x7F, 0x83, 0x01, };
#define  SM_Icon_width 17
#define  SM_Icon_height 13
const unsigned char  SM_Icon_bits[] PROGMEM  = {
  0xF0, 0x1F, 0x00, 0x08, 0x20, 0x00, 0x04, 0x40, 0x00, 0x04, 0x40, 0x00, 
  0xFE, 0xFF, 0x00, 0x22, 0x88, 0x00, 0x1D, 0x71, 0x01, 0x01, 0x00, 0x01, 
  0xC1, 0x07, 0x01, 0x41, 0x04, 0x01, 0xFE, 0xFF, 0x00, 0x24, 0x48, 0x00, 
  0x18, 0x30, 0x00, };
#define  status_battery_width 6
#define  status_battery_height 12
const unsigned char  status_battery_bits[] PROGMEM  = {
  0x00, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x00, 
  };
#define arrow_down_highlight_width 12
#define arrow_down_highlight_height 13
const unsigned char arrow_down_highlight_bits[] PROGMEM = {
  0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 
  0xF0, 0x00, 0xFF, 0x0F, 0xFE, 0x07, 0xFC, 0x03, 0xF8, 0x01, 0xF0, 0x00, 
  0x60, 0x00, };
#define arrow_down_width 16
#define arrow_down_height 16
const unsigned char arrow_down_bits[] PROGMEM =  {
  0xE0, 0x07, 0x20, 0x04, 0x20, 0x04, 0x20, 0x04, 0x20, 0x04, 0x20, 0x04, 
  0x20, 0x04, 0x3F, 0xFC, 0x03, 0xC0, 0x06, 0x60, 0x0C, 0x30, 0x18, 0x18, 
  0x30, 0x0C, 0x60, 0x06, 0xC0, 0x03, 0x80, 0x01, };
#define arrow_up_highlight_width 12
#define arrow_up_highlight_height 13
const unsigned char arrow_up_highlight_bits[] PROGMEM =  {
  0x60, 0x00, 0xF0, 0x00, 0xF8, 0x01, 0xFC, 0x03, 0xFE, 0x07, 0xFF, 0x0F, 
  0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 
  0xF0, 0x00, };
#define arrow_up_width 16
#define arrow_up_height 16
const unsigned char arrow_up_bits[] PROGMEM =  {
  0x80, 0x01, 0xC0, 0x03, 0x60, 0x06, 0x30, 0x0C, 0x18, 0x18, 0x0C, 0x30, 
  0x06, 0x60, 0x03, 0xC0, 0x3F, 0xFC, 0x20, 0x04, 0x20, 0x04, 0x20, 0x04, 
  0x20, 0x04, 0x20, 0x04, 0x20, 0x04, 0xE0, 0x07, };
#define  digit_0_width 16
#define  digit_0_height 28
const unsigned char  digit_0_bits[] PROGMEM  = {
  0xF0, 0xFF, 0xF8, 0xFF, 0xFC, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 
  0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 
  0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x3F, 0xFF, 0x1F, };
#define  digit_1_width 16
#define  digit_1_height 28
const unsigned char digit_1_bits[] PROGMEM  = {
  0x80, 0x1F, 0xC0, 0x1F, 0xE0, 0x1F, 0xF0, 0x1F, 0xF8, 0x1F, 0xF8, 0x1F, 
  0xF8, 0x1F, 0xF0, 0x1F, 0x80, 0x1F, 0x80, 0x1F, 0x80, 0x1F, 0x80, 0x1F, 
  0x80, 0x1F, 0x80, 0x1F, 0x80, 0x1F, 0x80, 0x1F, 0x80, 0x1F, 0x80, 0x1F, 
  0x80, 0x1F, 0x80, 0x1F, 0x80, 0x1F, 0x80, 0x1F, 0x80, 0x1F, 0x80, 0x1F, 
  0x80, 0x1F, 0x80, 0x1F, 0x80, 0x1F, 0x80, 0x1F, };
#define  digit_2_width 16
#define  digit_2_height 28
const unsigned char digit_2_bits[] PROGMEM  = {
  0xF0, 0x7F, 0xF8, 0xFF, 0xFC, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x3F, 0xFE, 0x3F, 0xFE, 0x3F, 0xFE, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFF, 
  0x80, 0x7F, 0xE0, 0x3F, 0xF0, 0x1F, 0xF8, 0x0F, 0xFC, 0x03, 0xFE, 0x01, 
  0xFF, 0x00, 0x7F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, };
#define  digit_3_width 16
#define  digit_3_height 28
const unsigned char digit_3_bits[] PROGMEM  = {
  0xF0, 0xFF, 0xF8, 0xFF, 0xFC, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x00, 0xFC, 0x00, 0xFC, 0x00, 0xFF, 
  0x00, 0x7F, 0x00, 0x1F, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFC, 
  0x00, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x3F, 0xFF, 0x1F, };
#define  digit_4_width 16
#define  digit_4_height 28
const unsigned char digit_4_bits[] PROGMEM  = {
  0x00, 0x0E, 0x00, 0x1E, 0x00, 0x3F, 0x00, 0x7F, 0x80, 0xFF, 0x80, 0xFF, 
  0xC0, 0xFF, 0xE0, 0xFF, 0xE0, 0xFF, 0xF0, 0xFF, 0xF0, 0xFD, 0xF8, 0xFD, 
  0xF8, 0xFC, 0xFC, 0xFC, 0x7C, 0xFC, 0x7E, 0xFC, 0x3E, 0xFC, 0x3F, 0xFC, 
  0xFF, 0xFF, 0xFE, 0xFF, 0xFC, 0xFF, 0xFC, 0xFF, 0xF8, 0xFF, 0x00, 0xFC, 
  0x00, 0xFC, 0x00, 0xFC, 0x00, 0xFC, 0x00, 0xFC, };
#define  digit_5_width 16
#define  digit_5_height 28
const unsigned char digit_5_bits[] PROGMEM  = {
  0xFE, 0x3F, 0xFF, 0x7F, 0xFF, 0x7F, 0xFF, 0x7F, 0xFF, 0x7F, 0xFF, 0x7F, 
  0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x7F, 0x00, 0xFF, 0x0F, 
  0xFF, 0x1F, 0xFF, 0x3F, 0xFF, 0x7F, 0xFF, 0xFF, 0x00, 0xFE, 0x00, 0xFE, 
  0x00, 0xFE, 0x1F, 0xFE, 0x3F, 0xFE, 0x3F, 0xFE, 0x3F, 0xFE, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFE, 0xFF, 0xFC, 0xFF, 0xF8, 0xFF, };
#define  digit_6_width 16
#define  digit_6_height 28
const unsigned char digit_6_bits[] PROGMEM  = {
  0xF0, 0x7F, 0xF8, 0x7F, 0xFC, 0x7F, 0xFE, 0x7F, 0xFF, 0x7F, 0xFF, 0x7F, 
  0x3F, 0x7C, 0x3F, 0x7C, 0x3F, 0x7C, 0x3F, 0x00, 0x3F, 0x00, 0xFF, 0x7F, 
  0xFF, 0x7F, 0xFF, 0x7F, 0xFF, 0x7F, 0xFF, 0x7F, 0xFF, 0x7F, 0x3F, 0x7E, 
  0x3F, 0x7E, 0x3F, 0x7E, 0x3F, 0x7E, 0x3F, 0x7E, 0x3F, 0x7E, 0xFF, 0x7F, 
  0xFF, 0x7F, 0xFF, 0x3F, 0xFF, 0x1F, 0xFF, 0x0F, };
#define  digit_7_width 16
#define  digit_7_height 28
const unsigned char digit_7_bits[] PROGMEM  = {
  0xFF, 0x0F, 0xFF, 0x1F, 0xFF, 0x3F, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x1F, 0xFC, 0x1F, 0x7E, 0x1F, 0x7E, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 
  0x80, 0x1F, 0x80, 0x1F, 0x80, 0x1F, 0xC0, 0x0F, 0xC0, 0x0F, 0xE0, 0x0F, 
  0xE0, 0x07, 0xE0, 0x07, 0xF0, 0x07, 0xF0, 0x03, 0xF0, 0x03, 0xF8, 0x01, 
  0xF8, 0x01, 0xFC, 0x01, 0xFC, 0x00, 0xFC, 0x00, };
#define  digit_8_width 16
#define  digit_8_height 28
const unsigned char digit_8_bits[] PROGMEM  = {
  0xF0, 0x7F, 0xF8, 0xFF, 0xFC, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0x7C, 
  0xFF, 0x3F, 0xFF, 0x1F, 0xF8, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0x3F, 0xFC, 
  0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x3F, 0xFF, 0x1F, };
#define  digit_9_width 16
#define  digit_9_height 28
const unsigned char digit_9_bits[] PROGMEM  = {
  0xF0, 0x7F, 0xF8, 0xFF, 0xFC, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x3F, 0xFE, 0x3F, 0xFE, 0x3F, 0xFE, 0x3F, 0xFE, 0x3F, 0xFE, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFE, 
  0x00, 0xFE, 0x1F, 0xFE, 0x3F, 0xFE, 0x3F, 0xFE, 0x3F, 0xFE, 0xFF, 0xFF, 
  0xFF, 0x7F, 0xFF, 0x3F, 0xFF, 0x1F, 0xFF, 0x0F, };

// Array of all digit bitmaps for convinience
const int bitmap_allArray_Digit = 10;
const unsigned char* bitmap_allArray[10] = {
  digit_0_bits,
  digit_1_bits,
  digit_2_bits,
  digit_3_bits,
  digit_4_bits,
  digit_5_bits,
  digit_6_bits,
  digit_7_bits,
  digit_8_bits,
  digit_9_bits
};

// Speed intergers
int speed = 0;
char speed_string[10];
int speed_string_lenght;

// Battery integers
int battery = 0;

// Button/switch integers
const int button1 = 6;
int buttoninput = 0;
int state = 0;
int old = 0;

// Variables to store the time
int hours = 0;
int minutes = 0;
int seconds = 0;

const int MODE_SHOW_TIME = 0;
const int MODE_SET_SECONDS = 3;
const int MODE_SET_MINUTES = 2;
const int MODE_SET_HOURS = 1;

// Char array for the time being showed on the display
char timeString[9];

// Variables to store the time
unsigned long currentMillis = 0;

// Int is enough to store the elapsed time
int elapsedTimeUpdateMillis = 0;
unsigned long previousTimeUpdateMillis = 0;

float percentageOfSecondElapsed = 0;

int currentMode = MODE_SHOW_TIME;


void setup(void)
{
  Serial.begin(9600);
  u8g2.setColorIndex(1);
  u8g2.setFont(u8g2_font_freedoomr10_tu);
  u8g2.begin(); // begin u8g2 library
  u8g2.setBitmapMode(1);

  pinMode(A0, INPUT);
  pinMode(button1, INPUT_PULLUP);
}

void loop(void)
{

  currentMillis = millis();

  checkTime();

  if (currentMode == MODE_SHOW_TIME) {
    increaseSeconds();
  } else {
    previousTimeUpdateMillis = currentMillis;
  }

  

  speed = map(analogRead(A0), 0, 1023, 0, 100); // Converting analog readings from 0-1023 to 0-100
  itoa(speed, speed_string, 10); //integer converted into char with the 10 decimal value
  speed_string_lenght = strlen(speed_string); // Computes the length of the string str up to

  u8g2.firstPage();
  do {

    for (int i = 0; i < speed_string_lenght; i++) {
      u8g2.drawXBMP((97 - speed_string_lenght * 8) + 18*i, 15, 16, 28, bitmap_allArray[speed_string[i] - 48]); 
      /* drawing speed_string, subtracting the decimal value of 48 (char value of 0)
      x coordinate is calculated so that it stays centered (center value - number of digits * (half the pixels of individual digits) ) + width of the character (+2 for spacing)*i
      */
    }

    if (digitalRead(button1) == LOW) { // Temporary button switching 
      Serial.print("switch\n");
      delay(100);
      state = old + 1;
      delay(100);
    }

    switch (state) { // switching modes with highlighting

      case 1:
        u8g2.drawXBMP( 0,  35,  21, 29, highlight_bits);
        old = state;
        break;
      case 2:
        u8g2.drawXBMP( 21,  35,  21, 29, highlight_bits);
        old = state;
        break;
      case 3:
        u8g2.drawXBMP( 43,  35,  21, 29, highlight_bits);
        old = 0;
        break;
      default:
        u8g2.drawXBMP( 0,  35,  21, 29, highlight_bits);
        old = state + 1;
        break;
    }

    // Drawing Time 
    if (currentMode != MODE_SHOW_TIME) {
      u8g2.drawTriangle((currentMode - 1) * 43 + 5, 0, currentMode * 43 - 5, 0, (currentMode - 1) * 43 + 21, 5);
    }
    sprintf_P(timeString, PSTR("%2d:%02d:%02d"), hours, minutes, seconds);
    // Draw the timeString
    u8g2.drawStr(73, 12, timeString);

    // Drawing the other non-animated elements
     u8g2.drawXBMP( 23,  51,  18, 11, AT_bits);
     u8g2.drawXBMP( 23,  37,  16, 12, AT_icon_bits);
     u8g2.drawXBMP( 14,  6,  36, 18, battery_bits);
     u8g2.drawXBMP( 89,  45,  15, 6, KMH_bits);
     u8g2.drawXBMP( 2,  51,  16, 11, RC_bits);
     u8g2.drawXBMP( 2,  38,  16, 21, RC_Icon_bits);
     u8g2.drawXBMP( 45,  51,  18, 11, SM_bits);
     u8g2.drawXBMP( 45,  37,  17, 13, SM_Icon_bits);
     u8g2.drawXBMP( 17,  9,  6, 12, status_battery_bits);
     u8g2.drawXBMP( 106, 45, 16, 16, arrow_down_bits);
     u8g2.drawXBMP( 72, 45, 16, 16, arrow_up_bits);

  } while (u8g2.nextPage()  );
    
}

void checkTime() {
  // Check if a minutes has been elapsed
  if (seconds > 59) {
    seconds = 0;
    minutes++;
  }

  // Check if an hour has been elapsed
  if (minutes > 59) {
    minutes = 0;
    hours++;
  }

  // Check if a day has been elapsed
  if (hours > 12) {
    hours = 1;
  }
}

void increaseSeconds() {
  elapsedTimeUpdateMillis = currentMillis - previousTimeUpdateMillis;

  // Check if 1000ms, 1 second, has been elapsed
  if (elapsedTimeUpdateMillis > 1000) {
    seconds++;
    // It might be possible that more than 1000ms has been elapsed e.g. 1200ms 
    // Then there are already 200ms elapsed of the next second. We need to
    // substract these on the "last time". So the next second will be updated 200ms earlier. 
    // This reduces the amount of time drift.
    previousTimeUpdateMillis = currentMillis - (elapsedTimeUpdateMillis - 1000);
  }
}

